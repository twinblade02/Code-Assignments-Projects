services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: quay.io/minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
      - MINIO_STORAGE_USE_HTTPS=false
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  minio-setup:
    image: quay.io/minio/mc
    depends_on:
      - minio
    volumes:
      - ./minio/create-bucket.sh:/create-bucket.sh
    entrypoint: /bin/sh
    command: -c "chmod +x /create-bucket.sh && /create-bucket.sh"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}

  mlflow:
    image: mlflow_server
    build: ./mlflow
    ports:
      - 5000:5000
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/mlflow 
      --host 0.0.0.0
      --port 5000 
      --serve-artifacts 
      --artifacts-destination s3://mlflow
      --default-artifact-root s3://mlflow
    depends_on:
      - postgres
      - minio-setup

volumes:
  postgres_data:
  minio_data: